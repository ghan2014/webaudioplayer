{
  "name": "grunt-easy-rpm",
  "description": "Easily create RPM packages.",
  "version": "1.5.4",
  "homepage": "https://github.com/panitw/easy-rpm",
  "author": {
    "name": "Panit Wechasil"
  },
  "contributors": [
    {
      "name": "Paul Coyle"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/panitw/easy-rpm.git"
  },
  "bugs": {
    "url": "https://github.com/panitw/easy-rpm/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/panitw/easy-rpm/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "chalk": "^0.5.1",
    "grunt": "~0.4.5",
    "lodash": "^2.4.1",
    "shortid": "~2.0.1",
    "valid-url": "^1.0.9",
    "validator": "^3.22.0"
  },
  "devDependencies": {
    "grunt": "~0.4.5",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-jsbeautifier": "~0.2.7",
    "grunt-mocha-test": "^0.12.1",
    "mocha": "^1.21.5"
  },
  "keywords": [
    "grunt",
    "gruntplugin",
    "rpm",
    "packager",
    "package",
    "red hat"
  ],
  "readme": "# grunt-easy-rpm\nA [Grunt](http://gruntjs.com/) task to easily create [RPM](http://www.rpm.org/)\npackages.\n\n[![NPM](https://nodei.co/npm/grunt-easy-rpm.png?compact=true)](https://nodei.co/npm/grunt-easy-rpm/)\n\nIf you are interested in participating in the project, consult the Contributing\nsection below.\n\n## Prerequisites\nThis plugin requires Grunt `~0.4.5` and, at minimum, the `rpmdevtools`.\nThe RPM tools can be installed on most unix-like systems, including Mac OSX.\n\n### Linux\n```shell\nsudo yum install rpmdevtools\n```\n\n### Mac OSX\nInstallation can be done from source either manually or with\n[Homebrew](http://brew.sh).  See [these notes regarding installation with Homebrew](http://timperrett.com/2014/03/23/enabling-rpmbuild-on-mac-osx/).\n\n## Getting Started\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out\nthe [Getting Started](http://gruntjs.com/getting-started) guide.  The guide\ncovers creating a [Gruntfile](http://gruntjs.com/sample-gruntfile), installing\nand using plugins. Once you're familiar with the process, install `easy-rpm`:\n\n```shell\nnpm install grunt-easy-rpm --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile\nwith this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks(\"grunt-easy-rpm\");\n```\n\n## rpmlint\nYou can lint your generated RPMs and SPEC files with `rpmlint` to ensure you\nmeet the requirements for your target distribution(s).  It is worth noting\nthat, while `rpmlint` will warn you of problems in your RPM or SPEC file, these\ndo not necessarily mean that they are not usable.  For those who are not about\nto distribute their packages via the official package repositories, many of the\nwarnings `rmplint` produces will be irrelevant (for example, Fedora requires a\nchangelog in the SPEC file as part of their guidelines but RPMs without a\nchangelog in the SPEC should install just fine).\n[`rpmlint` project page](http://rpmlint.sourceforge.net/)\n\n# The \"easy_rpm\" task\n\n## Overview\nIn your project's Gruntfile, add a section named `easy_rpm` to the data object\npassed into `grunt.initConfig()`:\n\n```js\ngrunt.initConfig({\n  easy_rpm: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    }\n  }\n})\n```\n\n## Usage Examples\n### Basic Usage\nIn this example, the default options are used for most of the fields. Each file\nis copied individually with the directory structure being preserved.\n\nNote that the `files` group(s) **must** reside in targets, not the `options`\ndefinition.  In the example below, the target name is 'release'.\n\n```js\ngrunt.initConfig({\n  easy_rpm: {\n    options: {\n      // These are the bare-minimum values required to create a properly named\n      // RPM package.  The plugin does contain defaults for these if you omit\n      // them, and will notify you when this occurs.\n      name: \"mypackage\",\n      version: \"1.0.0\",\n      release: 1,\n      buildArch: \"x86_64\"\n    },\n    release: {\n      // Sets up the target source files as:\n      // /target/dir/output/file1.js\n      // /target/dir/output/file2.js\n      // /target/dir/output/file3.js\n      files: [\n        {src: \"output/file1.js\", dest: \"/target/dir\"},\n        {src: \"output/file2.js\", dest: \"/target/dir\"},\n        {src: \"output/file3.js\", dest: \"/target/dir\"}\n      ]\n    }\n  }\n})\n```\n\n### Using CWD (current working directory)\nThe `cwd` attribute is used to define the working directory for an individual\nor set of files.  When this attribute is set, `src` entries are relative to the\n`cwd` path . This task uses the [Grunt implementation of file expansion](http://gruntjs.com/configuring-tasks#building-the-files-object-dynamically)\nwhich may be of use as additional information.\n\nGiven the directory structure:\n```\nlocal/\n  text/\n    a.txt\n    b.txt\n  image/\n    c.png\n    d.png\n```\n\nAnd the configuration:\n```js\ngrunt.initConfig({\n  easy_rpm: {\n    options: {\n      name: \"mypackage\",\n      version: \"1.0.0\",\n      release: 1,\n      buildArch: \"x86_64\"\n    },\n    release: {\n      files: [\n        {src: '*.txt', dest: '/opt/text', cwd: 'local/text'},\n        {src: 'image/*.png', dest: '/opt'}\n      ]\n    }\n  }\n})\n```\n\nResults in the following RPM structure:\n```\n/opt/\n  text/\n    a.txt\n    b.txt\n  image/\n    c.png\n    d.png\n```\n\n### Using Wildcards\nFile lists can also be generated using wildcards whose syntax is defined by\n[node-glob](https://github.com/isaacs/node-glob).  Note that this can also be\npaired with the above-mentioned `cwd` attribute.\n\n```js\ngrunt.initConfig({\n  easy_rpm: {\n    options: {\n      name: \"mypackage\",\n      version: \"1.0.0\",\n      release: 1,\n      buildArch: \"x86_64\"\n    },\n    release: {\n      files: [\n        {src: \"output/**\", dest: \"/target/dir\"}\n      ]\n    }\n  }\n})\n```\n\n### Excluding Files\nFiles can be excluded from packaging by adding them to the `excludeFiles` list.\nThe node-glob wildcard syntax can be used to specify exclusions as well.  Note\nthat the paths to exclude apply to the source file paths.\n\n```js\ngrunt.initConfig({\n  easy_rpm: {\n    options: {\n      name: \"mypackage\",\n      version: \"1.0.0\",\n      release: 1,\n      buildArch: \"x86_64\"\n    },\n    release: {\n      files: [\n        {src: \"routes/**/*\", dest: \"/target/dir\"},\n        {src: \"views/**/*\", dest: \"/target/dir\"}\n      ],\n      excludeFiles: [\n        \"**/index.html\",\n        \"routes/fileA.js\"\n      ]\n    }\n  }\n})\n```\n\n### Setting File Mode, User (Owner), and Group, %attr\nEach target file can have it's `mode`, `user`, and `group` set by specifying\nthese values in the file elements.  Note that, per the RPM SPEC file\nspecifications, values for `mode` must be numeric.  Additionally, `user` and\n`group` cannot be UIDs (numeric) but must be names (alphanumeric).\n\nNote that, for backwards compatibility, setting `owner` is equivalent to\nsetting the `user` property.\n\n```js\ngrunt.initConfig({\n  easy_rpm: {\n    options: {\n      name: \"mypackage\",\n      version: \"1.0.0\",\n      release: 1,\n      buildArch: \"x86_64\"\n    },\n    release: {\n      files: [\n        {src: \"output/file1.js\", dest: \"/target/dir\", mode: \"755\"},\n        {src: \"output/file2.js\", dest: \"/target/dir\", mode: \"700\", user: \"mysql\"},\n        {src: \"output/file3.js\", dest: \"/target/dir\", user: \"admin\", group: \"admin\"},\n        {src: \"output2/**\", dest: \"/target/dir\", mode: \"644\"}\n      ]\n    }\n  }\n})\n```\n\n### Setting Default Attributes, %defattr\nYou can set the default attributes for all files and directories in the package\nby defining the `defaultAttributes` property in the options.  This property\nshould be an object which takes any or all of the following properties:\n`mode`, `user`, `group`, `dirMode`.\n\n```js\ngrunt.initConfig({\n  easy_rpm: {\n    options: {\n      name: \"mypackage\",\n      version: \"1.0.0\",\n      release: 1,\n      buildArch: \"x86_64\",\n      defaultAttributes: {\n        mode: 644,\n        user: 'mysql',\n        group: 'mysql',\n        dirMode: 644\n      }\n    },\n    release: {\n      files: [\n        {src: \"output/file1.js\", dest: \"/target/dir\"},\n        {src: \"output/file2.js\", dest: \"/target/dir\"}\n      ]\n    }\n  }\n})\n```\n\n### Setting %doc, %config, and %dir\nTarget files can be marked as documentation or configuration files by setting\n`doc`, `config`, and `dir` to `true` as needed.  For more detailed information\non how these directives operate, consult the RPM manual.\n\n```js\ngrunt.initConfig({\n  easy_rpm: {\n    options: {\n      name: \"mypackage\",\n      version: \"1.0.0\",\n      release: 1,\n      buildArch: \"x86_64\"\n    },\n    release: {\n      files: [\n        {doc: true, cwd:\"output\", src: \"README\", dest: \"/target/dir\"},\n        {config: true, cwd: \"output\", src: \"mypackage.conf\", dest: \"/etc/mypackage\", owner: \"admin\", group: \"admin\"}\n      ]\n    }\n  }\n})\n```\n\n## SPEC Validations\nThis task performs some minor validations on the options provided that result\nin SPEC file generation.  These validations are meant to be distribution\nagnostic; they will only give warnings for possibly problematic settings or\ndeviations from the baseline RPM specification.  Errors are issued for options\nthat will definitely cause problems when building or using the RPM.  It should\nbe noted that the task will fail if any errors occur during validation.\n\n## Options\nThere are many options available since RPM has many configurable aspects.\nThree properties from the `package.json` (if it exists) are inherited by the\noptions if they do not specify them.  These are: `name`, `version`, and\n`description`.  If these are not specified in the options, the task will notify\nyou of the inheritance when run.\n\nFor backwards compatibility, some properties are provided with default values\nif they are not specified in the options.  When these defaults are used, the\ntask will notify you of them when run.\n\n### name\n`String` (default: `'noname'`)\n\nUsed to set at the name tag in your RPM package and also used in the\nconstruction of the RPM file name.\n\n\n### version\n`String` (default: `'0.0.0'`)\n\nUsed to set the version tag in your RPM package and also used in the\nconstruction of the RPM file name.\n\n### release\n`String` | `Number` (default: `1`)\n\nUsed to set the release tag in your RPM package and also used in the\nconstruction of the RPM file name.\n\n### buildArch\n`String` (default: `'noarch'`)\n\nA string value that is used to set specify the target architecture of your RPM\npackage. This value is also used in the construction of the RPM file name.\n\n### summary\n`String` (default: `'No Summary'`)\n\nUsed to set the summary tag in your RPM package.\n\n### description\n`String` (default: `'No Description'`)\n\nUsed to set the description directive section in your RPM package.\n\n### license\n`String` (default: `'MIT'`)\n\nUsed to specify the license tag in your RPM package.\n\n### vendor\n`String` (default: `'Vendor'`)\n\nUsed to set the vendor tag in your RPM package.\n\n### group\n`String` (default: `'Development/Tools'`)\n\nUsed to specify the group tag in your RPM package.\n\n### prefix\n`String`\n\nThis will specify the relocatable root of the package so that it may be\nrelocated by the user at install time.  The manual entry for the\n[prefix tag](http://www.rpm.org/max-rpm/s1-rpm-reloc-prefix-tag.html) explains\nthe use case quite well.\n\n### url\n`String`\n\nA URL to the project homepage or documentation of the project. Defined in the\n[spec-file specification](http://www.rpm.org/wiki/PackagerDocs/Spec#URL:andPackager:Tags).\n\n### changelog\n`Array` | `Function`\n\nAn array of changelog lines or a function called to create an array of lines\ncontaining the changelog. This will add the changelog directive block to the\nspec-file.\n\n_NOTE:_ You will still have to adhere to the changelog syntax to use this\nproperly for more information read the\n[Fedora packaging guidelines on Changelogs](http://fedoraproject.org/wiki/Packaging:Guidelines#Changelogs).\n\n### defines\n`Array<String>`\n\nAn array of arbitrary `%define` statements to be added to the RPM SPEC file.\nNote that this property can be set on both the `options` and target\nconfigurations.  When set on `options`, the define values will be added to all\ntargets.\n\nSetting the option as so:\n```js\n{\n  defines: [\n    '_binary_filedigest_algorithm 1',\n    '_binary_payload w9.gzdio'\n  ]\n}\n```\n\nWill add the following to the SPEC file:\n```\n%define _binary_filedigest_algorithm 1\n%define _binary_payload w9.gzdio\n```\n\n### requires\n`Array<String>`\n\nAn array of packages that this package depends on (e.g.\n`[\"nodejs >= 0.10.22\", \"libpng\"]`).\n\n### provides\n`Array<String>`\n\nAn array of virtual packages that this package provides.\n\n### conflicts\n`Array<String>`\n\nAn array of packages that this package conflicts with (e.g.\n`[\"cobol\", \"sparta > 300\"]`).\n\n### dependencies (deprecated)\n`Array<String>`\n\nAn array of packages that this package depends on (e.g. `[\"nodejs >= 0.10.22\"]`).\n**Note that this is deprecated in favour of `requires`.** This is mapped to the\n`Requires` property in spec file.\n\n### autoReq, autoProv\n`Boolean` (default: `true`)\n\nThese tags control automatic dependency processing while the package is being\nbuilt.  Their default state of `true` is not a decision by this project but\nrepresents the default action taken by RPM.  When both `autoReq` and `autoProv`\nare set to `false`, the `AutoReqProv` tag will instead be used with a value of\n`no` in the SPEC file.\n\n### excludeArchs\n`Array<String>`\n\nAn array specifying which architectures to prevent the RPM from building on\n(e.g. `[\"sparc\"]`).\n\n### exclusiveArchs\n`Array<String>`\n\nAn array specifying _only_ the architectures the RPM should build on\n(e.g. `[\"x86_64\"]`).\n\n### excludeOS\n`Array<String>`\n\nAn array specifying which operating systems to prevent the RPM from building on\n(e.g. `[\"sparc\"]`).\n\n### exclusiveOS\n`Array<String>`\n\nAn array specifying _only_ the operating systems the RPM should build on\n(e.g. `[\"x86_64\"]`).\n\n### buildRoot\n`String`\n\nUsed to define an alternate build root.  Use this one with caution and\n[consult the manual](http://www.rpm.org/max-rpm-snapshot/ch-rpm-anywhere.html).\nYou will likely need to make use of the `cleanScript` option when specifying\nthis property.\n\n### sources\n`Array<String>`\n\nUsed to specify the locations the source code is provided by the developer(s).\n(Read more about this tag)[http://www.rpm.org/max-rpm-snapshot/s1-rpm-inside-tags.html].\n\n### noSources\n`Array<String>`\n\nUsed to direct RPM to omit one or more source files from the source package.\n(Read more about this tag)[http://www.rpm.org/max-rpm-snapshot/s1-rpm-inside-tags.html].\n\n### patches\n`Array<String>`\n\nThe patch tag is used to identify which patches are associated with the\nsoftware being packaged. The patch files are kept in RPM's SOURCES directory,\nso only the name of the patch file should be specified.\n\n### noPatches\n`Array<String>`\n\nJust like the nosource tag, the nopatch tag is used to direct RPM to omit\nsomething from the source package. In the case of nosource, that \"something\"\nwas one or more sources. For the nopatch tag, the \"something\" is one or more\npatches.\n\n### prepScript\n`Array<String>`\n\nThe first script that RPM executes during a build.  Each element in the array\nprovided will be a line in the `%prep` directive block of the SPEC file.\n[There are also some useful macros that can be used here](http://www.rpm.org/max-rpm-snapshot/s1-rpm-inside-macros.html).\n\n### buildScript\n`Array<String>`\n\nThe build script is run after the prep script.  Generally it is used for things\nlike running `make`.\n\n### installScript\n`Array<String>`\n\nThe install script is run after the build script and is used for running the\ncommands that perform installation related tasks.\n\n### checkScript\n`Array<String>`\n\nThe check script is run after the build script and is used for running the\ncommands that perform installation checking tasks (test suites, etc.)\n\n### cleanScript\n`Array<String>`\n\nThe clean script is used to clean up the build directory tree.  RPM usually\ndoes this automatically but this is especially useful for packages that\nspecify a `buildRoot`.\n\n### preInstallScript\n`Array<String>`\n\nAn array of commands to be executed before the installation. Each element in\nthe array represents a command.\n\n### postInstallScript\n`Array<String>`\n\nAn array of commands to be executed after the installation. Each element in\nthe array represents a command.\n\n### preUninstallScript\n`Array<String>`\n\nAn array of commands to be executed before uninstallation. Each element in\nthe array represents a command.\n\n### postUninstallScript\n`Array<String>`\n\nAn array of commands to be executed after uninstallation. Each element in\nthe array represents a command.\n\n### verifyScript\n`Array<String>`\n\nThis script is executed whenever the installed package is verified by RPMs\nverification command.  Effectively, it should be used to verify the the\ncorrect installation of the package.  Note that RPM already verifies the\nexistence of the package's files along with their file attributes.  Thus, the\ncontents of this script should focus on other aspects of the installation.\n\n### postPackageCreate\n`String` (deprecated) | `function(rpmPath, rpmFilename)`\n\nWhen a string, sets where to copy the rpm after it has been created.\n**Note that this is deprecated in favour of the `rpmDestination` property.**\n\nWhen given a function, the function is executed when the package has been\ncreated and provided with two arguments: the path and filename of the newly\ncreated package.\n\n### rpmDestination\n`String` (default: `'.'`)\n\nLocation where the resulting RPM should be placed.\n\n### tempDir\n`String` (default: `'tmp-<auto_gen_id>'`)\n\nSets the temporary path name that stores the structure that required by the\n`rpmbuild` command.  Note that this is used for the setup and building of the\npackage and does not affect the RPM itself.\n\n### keepTemp\n`Boolean` (default: `false`)\n\nWhen `true`, will keep the temporary directory used to build the RPM after the\nit is built. This is useful for problem investigation.\n\n## Contributing\nFor those interested in contributing to the project, there are a few simple\nguidelines to follow.\n\nIf you've found a bug or feel the project could use a new feature:\n  1.  Submit an [issue on github](https://github.com/panitw/easy-rpm/issues)\n  2.  Participate in the discussion on it\n\nIf you want to contribute code to the project:\n  1. Ensure there is an issue filed for the bug or feature (see above)\n  2. Fork the project and branch off the `develop` branch\n  3. On your bug/feature branch, write the code that addresses the issue (see\n     below for style guidelines and process)\n  4. Periodically pull from the `develop` branch on this repository\n  5. When you feel it is complete, submit a pull request targeting the\n     `develop` branch on this repository\n  6. Participate in the code review\n\nCode style and process:\n  * To keep the style uniform, use [EditorConfig](http://editorconfig.org/) and\n    the grunt task `jsbeautifier`\n  * Write clear, concise comments and commit messages\n  * Squash commits that iterate work on a similar set of changes\n",
  "readmeFilename": "README.md",
  "_id": "grunt-easy-rpm@1.5.4",
  "_shasum": "d01b2a8ed1090a319007d87f0822d50da1f52b71",
  "_from": "grunt-easy-rpm@^1.5.3",
  "_resolved": "https://registry.npmjs.org/grunt-easy-rpm/-/grunt-easy-rpm-1.5.4.tgz"
}
